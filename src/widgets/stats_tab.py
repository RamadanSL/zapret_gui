from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout,
                              QPushButton, QLabel, QGroupBox, QToolButton,
                              QMenu, QFrame, QGridLayout, QSplitter)
from PySide6.QtCore import Qt, Signal, QTimer
from PySide6.QtGui import QFont, QColor, QAction
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import datetime
import re
from pathlib import Path

from utils.file_manager import FileManager
from utils.style_utils import StyleUtils

class StatCard(QFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    
    def __init__(self, title, value, icon="", color="#1976d2", parent=None):
        super().__init__(parent)
        self.title = title
        self.value = value
        self.icon = icon
        self.color = color
        self.init_ui()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç–æ—á–∫–∏."""
        self.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 15px;
            }}
        """)
        
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        title_label = QLabel(f"{self.icon} {self.title}")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 10pt;
                color: #666666;
                font-weight: normal;
            }
        """)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(self.value)
        value_label.setStyleSheet(f"""
            QLabel {{
                font-size: 18pt;
                font-weight: bold;
                color: {self.color};
            }}
        """)
        
        layout.addWidget(title_label)
        layout.addWidget(value_label)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ value_label –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.value_label = value_label

class StatsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    def __init__(self, file_manager: FileManager):
        super().__init__()
        self.file_manager = file_manager
        self.log_file = self.file_manager.base_dir / "logs" / "winws.log"
        
        self.init_ui()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.refresh_btn.clicked.connect(self.update_stats)
        self.clear_btn.clicked.connect(self.clear_stats)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_stats)
        self.timer.start(5000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.update_stats()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #1c1b1f;
                margin-bottom: 10px;
            }
        """)
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Orientation.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        top_panel = self.create_top_panel()
        splitter.addWidget(top_panel)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
        bottom_panel = self.create_bottom_panel()
        splitter.addWidget(bottom_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        splitter.setSizes([150, 400])
        main_layout.addWidget(splitter)

    def create_top_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        panel_header = QLabel("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        panel_header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1c1b1f;
                padding: 5px 0;
            }
        """)
        layout.addWidget(panel_header)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_layout = QGridLayout()
        stats_layout.setVerticalSpacing(15)
        stats_layout.setHorizontalSpacing(15)
        
        self.total_blocks_card = StatCard("–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", "0", "üö´", "#f44336")
        self.today_blocks_card = StatCard("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è", "0", "üìÖ", "#ff9800")
        self.last_block_card = StatCard("–ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–Ω–∏–∫–æ–≥–¥–∞", "‚è∞", "#2196f3")
        
        stats_layout.addWidget(self.total_blocks_card, 0, 0)
        stats_layout.addWidget(self.today_blocks_card, 0, 1)
        stats_layout.addWidget(self.last_block_card, 0, 2)
        
        layout.addLayout(stats_layout)
        
        return panel

    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–ø–∏—Å–∫–∞
        content_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        graph_panel = self.create_graph_panel()
        content_splitter.addWidget(graph_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
        blocks_panel = self.create_blocks_panel()
        content_splitter.addWidget(blocks_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        content_splitter.setSizes([600, 300])
        layout.addWidget(content_splitter)
        
        return panel

    def create_graph_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        graph_header = QLabel("üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        graph_header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1c1b1f;
                padding: 5px 0;
            }
        """)
        layout.addWidget(graph_header)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.figure = Figure(figsize=(8, 4))
        self.canvas = FigureCanvas(self.figure)
        self.ax = self.figure.add_subplot(111)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
        self.figure.patch.set_facecolor('#f8f9fa')
        self.ax.set_facecolor('#f8f9fa')
        
        self.ax.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ —á–∞—Å–∞–º", fontsize=12, fontweight='bold')
        self.ax.set_xlabel("–ß–∞—Å", fontsize=10)
        self.ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫", fontsize=10)
        self.ax.grid(True, alpha=0.3)
        
        layout.addWidget(self.canvas)
        
        return panel

    def create_blocks_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        blocks_header = QLabel("üö´ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        blocks_header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1c1b1f;
                padding: 5px 0;
            }
        """)
        layout.addWidget(blocks_header)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.blocks_label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        self.blocks_label.setStyleSheet("""
            QLabel {
                font-size: 10pt;
                color: #666666;
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 10px;
                line-height: 1.4;
            }
        """)
        self.blocks_label.setWordWrap(True)
        layout.addWidget(self.blocks_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)
        
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_btn.setStyleSheet(StyleUtils.get_button_style("secondary"))
        self.refresh_btn.setMinimumHeight(35)
        self.refresh_btn.setFont(QFont("Segoe UI", 10, QFont.Weight.Medium))
        
        self.clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.setStyleSheet(StyleUtils.get_button_style("danger"))
        self.clear_btn.setMinimumHeight(35)
        self.clear_btn.setFont(QFont("Segoe UI", 10, QFont.Weight.Medium))
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_menu_btn = QToolButton()
        self.actions_menu_btn.setText("üìã –î–µ–π—Å—Ç–≤–∏—è")
        self.actions_menu_btn.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)
        self.actions_menu_btn.setStyleSheet("""
            QToolButton {
                background-color: #1976d2;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 12px;
                font-weight: bold;
                font-size: 10pt;
                min-height: 35px;
            }
            QToolButton:hover {
                background-color: #1565c0;
            }
            QToolButton:pressed {
                background-color: #0d47a1;
            }
        """)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_menu = QMenu()
        self.actions_menu.setStyleSheet("""
            QMenu {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 6px;
                padding: 5px;
            }
            QMenu::item {
                padding: 10px 20px;
                border-radius: 4px;
                margin: 2px;
            }
            QMenu::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é
        actions = [
            ("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", self.export_stats),
            ("üìà –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", self.show_detailed_stats),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.settings_auto_update)
        ]
        
        for text, action in actions:
            menu_action = QAction(text, self)
            menu_action.triggered.connect(action)
            self.actions_menu.addAction(menu_action)
        
        self.actions_menu_btn.setMenu(self.actions_menu)
        
        btn_layout.addWidget(self.refresh_btn)
        btn_layout.addWidget(self.clear_btn)
        btn_layout.addWidget(self.actions_menu_btn)
        btn_layout.addStretch()
        
        layout.addLayout(btn_layout)
        
        return panel
        
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.log_file.exists():
            self.blocks_label.setText("üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –°—á–µ—Ç—á–∏–∫–∏
            total_blocks = 0
            today_blocks = 0
            last_block_time = None
            blocks_by_hour = {i: 0 for i in range(24)}
            last_blocks = []
            
            today = datetime.date.today()
            
            for line in reversed(lines):
                if "Blocked connection" in line:
                    total_blocks += 1
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                    try:
                        timestamp_str = re.search(r'\[(.*?)\]', line).group(1)
                        timestamp = datetime.datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                        
                        if last_block_time is None:
                            last_block_time = timestamp
                            
                        if timestamp.date() == today:
                            today_blocks += 1
                            blocks_by_hour[timestamp.hour] += 1
                            
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                        if len(last_blocks) < 5:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∞–¥—Ä–µ—Å
                            ip_match = re.search(r'to ([\d\.]+)', line)
                            if ip_match:
                                last_blocks.append(f"üïê {timestamp_str}: {ip_match.group(1)}")
                                
                    except Exception:
                        continue
                        
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.total_blocks_card.value_label.setText(str(total_blocks))
            self.today_blocks_card.value_label.setText(str(today_blocks))
            
            if last_block_time:
                self.last_block_card.value_label.setText(
                    last_block_time.strftime('%H:%M:%S')
                )
            else:
                self.last_block_card.value_label.setText("–Ω–∏–∫–æ–≥–¥–∞")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            self.ax.clear()
            hours = list(blocks_by_hour.keys())
            counts = list(blocks_by_hour.values())
            
            bars = self.ax.bar(hours, counts, color='#1976d2', alpha=0.8)
            self.ax.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ —á–∞—Å–∞–º", fontsize=12, fontweight='bold')
            self.ax.set_xlabel("–ß–∞—Å", fontsize=10)
            self.ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫", fontsize=10)
            self.ax.grid(True, alpha=0.3)
            self.ax.set_facecolor('#f8f9fa')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, count in zip(bars, counts):
                if count > 0:
                    self.ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                               str(count), ha='center', va='bottom', fontsize=8)
            
            self.canvas.draw()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            if last_blocks:
                self.blocks_label.setText("\n".join(last_blocks))
            else:
                self.blocks_label.setText("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö")
            
        except Exception as e:
            self.blocks_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{str(e)}")
            
    def clear_stats(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from PySide6.QtWidgets import QMessageBox
        
        reply = QMessageBox.question(
            self, 
            "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                if self.log_file.exists():
                    self.log_file.unlink()
                    
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                self.log_file.parent.mkdir(parents=True, exist_ok=True)
                self.log_file.touch()
                
                self.update_stats()
                QMessageBox.information(self, "‚úÖ –£—Å–ø–µ—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!")
                
            except Exception as e:
                QMessageBox.critical(self, "‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")
    
    def export_stats(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª."""
        from PySide6.QtWidgets import QFileDialog, QMessageBox
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, 
            "üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
            f"zapret_stats_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", 
            "Text Files (*.txt)"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Zapret ===\n\n")
                    f.write(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                    f.write(f"–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {self.total_blocks_card.value_label.text()}\n")
                    f.write(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {self.today_blocks_card.value_label.text()}\n")
                    f.write(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.last_block_card.value_label.text()}\n\n")
                    f.write("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n")
                    f.write(self.blocks_label.text())
                
                QMessageBox.information(self, "‚úÖ –£—Å–ø–µ—Ö", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {file_path}")
                
            except Exception as e:
                QMessageBox.critical(self, "‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")
    
    def show_detailed_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        from PySide6.QtWidgets import QMessageBox
        
        stats_text = f"""
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üö´ –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {self.total_blocks_card.value_label.text()}
üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {self.today_blocks_card.value_label.text()}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.last_block_card.value_label.text()}

üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ —á–∞—Å–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
        """
        
        QMessageBox.information(self, "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)
    
    def settings_auto_update(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        from PySide6.QtWidgets import QMessageBox
        
        QMessageBox.information(
            self, 
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        )
            
    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤–∫–ª–∞–¥–∫–∏"""
        super().showEvent(event)
        self.update_stats()
        # –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.timer.start()
        
    def hideEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        super().hideEvent(event)
        # –ü—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.timer.stop() 