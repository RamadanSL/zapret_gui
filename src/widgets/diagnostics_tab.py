import os
import shutil
import subprocess
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QTextEdit, QMessageBox, 
                               QHBoxLayout, QGroupBox, QMenu, QMenuBar, QToolButton, 
                               QProgressBar, QLabel, QSplitter, QFrame)
from PySide6.QtCore import QThread, Signal, QObject, Qt, QTimer
from PySide6.QtGui import QColor, QTextCursor, QFontDatabase, QFont, QAction, QIcon

from utils.style_utils import StyleUtils

class DiagnosticsWorker(QObject):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    result = Signal(str, QColor)
    error = Signal(str)
    finished = Signal()
    progress = Signal(int)

    def __init__(self, task='all', parent=None):
        super().__init__(parent)
        self.task = task
        self._is_running = True

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            tasks_to_run = []
            if self.task == 'all':
                tasks_to_run = [self.check_conflicts, self.check_dns, self.check_network, self.check_services]
                self.progress.emit(0)
            elif self.task == 'conflicts':
                tasks_to_run = [self.check_conflicts]
                self.progress.emit(0)
            elif self.task == 'dns':
                tasks_to_run = [self.check_dns]
                self.progress.emit(0)
            elif self.task == 'network':
                tasks_to_run = [self.check_network]
                self.progress.emit(0)
            elif self.task == 'services':
                tasks_to_run = [self.check_services]
                self.progress.emit(0)

            total_tasks = len(tasks_to_run)
            for i, task_func in enumerate(tasks_to_run):
                if not self._is_running:
                    break
                task_func()
                progress = int((i + 1) / total_tasks * 100)
                self.progress.emit(progress)
        except Exception as e:
            import traceback
            error_info = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:\n{traceback.format_exc()}"
            self.error.emit(error_info)
        finally:
            if self._is_running:
                self.finished.emit()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."""
        self._is_running = False

    def _run_command(self, command):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""
        return subprocess.run(
            command,
            capture_output=True, text=True, encoding='cp866',
            errors='ignore', # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            creationflags=subprocess.CREATE_NO_WINDOW
        )

    def check_conflicts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        if not self._is_running: return
        self.result.emit("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n", QColor("#1976d2"))
        self.result.emit("=" * 50 + "\n", QColor("#666666"))
        
        conflict_processes = [
            'goodbyedpi.exe', 'PowerTunnel.exe', 'simplewall.exe', 
            'glasswire.exe', 'comodo.exe', 'avast.exe', 'avg.exe'
        ]
        
        for i, process in enumerate(conflict_processes):
            if not self._is_running: return
            try:
                res = self._run_command(['tasklist', '/FI', f'IMAGENAME eq {process}'])
                if process.lower() in res.stdout.lower():
                    self.result.emit(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {process}\n", QColor("#ff9800"))
                else:
                    self.result.emit(f"‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å {process} –Ω–µ –Ω–∞–π–¥–µ–Ω\n", QColor("#4caf50"))
            except Exception as e:
                self.result.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process}: {e}\n", QColor("#f44336"))

    def check_dns(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS-—Å–µ—Ä–≤–µ—Ä—ã."""
        if not self._is_running: return
        self.result.emit("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS-—Å–µ—Ä–≤–µ—Ä–æ–≤\n", QColor("#1976d2"))
        self.result.emit("=" * 50 + "\n", QColor("#666666"))
        
        try:
            res = self._run_command(['ipconfig', '/all'])
            dns_found = False
            for line in res.stdout.split('\n'):
                if not self._is_running: return
                if 'dns-—Å–µ—Ä–≤–µ—Ä—ã' in line.lower() or 'dns servers' in line.lower():
                    dns_ip = line.split(':')[-1].strip()
                    if '127.0.0.1' in dns_ip:
                        self.result.emit(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π DNS-—Å–µ—Ä–≤–µ—Ä: {dns_ip}\n", QColor("#4caf50"))
                        dns_found = True
                        break 
            if not dns_found:
                self.result.emit("‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π DNS-—Å–µ—Ä–≤–µ—Ä (127.0.0.1) –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–ª—É–∂–±–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n", QColor("#ff9800"))
        except Exception as e:
            self.result.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ DNS: {e}\n", QColor("#f44336"))

    def check_network(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        if not self._is_running: return
        self.result.emit("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n", QColor("#1976d2"))
        self.result.emit("=" * 50 + "\n", QColor("#666666"))
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            res = self._run_command(['ping', '-n', '1', '8.8.8.8'])
            if res.returncode == 0:
                self.result.emit("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n", QColor("#4caf50"))
            else:
                self.result.emit("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n", QColor("#ff9800"))
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç
            res = self._run_command(['ping', '-n', '1', '127.0.0.1'])
            if res.returncode == 0:
                self.result.emit("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω\n", QColor("#4caf50"))
            else:
                self.result.emit("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö–æ—Å—Ç–æ–º\n", QColor("#f44336"))
                
        except Exception as e:
            self.result.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ç–∏: {e}\n", QColor("#f44336"))

    def check_services(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª—É–∂–±—ã Windows."""
        if not self._is_running: return
        self.result.emit("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–± Windows\n", QColor("#1976d2"))
        self.result.emit("=" * 50 + "\n", QColor("#666666"))
        
        services_to_check = ['zapret', 'WinDivert', 'WinDivert14']
        
        for service in services_to_check:
            if not self._is_running: return
            try:
                res = self._run_command(['sc', 'query', service])
                if res.returncode == 0:
                    if 'RUNNING' in res.stdout.upper():
                        self.result.emit(f"‚úÖ –°–ª—É–∂–±–∞ {service} –∑–∞–ø—É—â–µ–Ω–∞\n", QColor("#4caf50"))
                    elif 'STOPPED' in res.stdout.upper():
                        self.result.emit(f"‚ö†Ô∏è  –°–ª—É–∂–±–∞ {service} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", QColor("#ff9800"))
                    else:
                        self.result.emit(f"‚ÑπÔ∏è  –°–ª—É–∂–±–∞ {service} –Ω–∞–π–¥–µ–Ω–∞\n", QColor("#2196f3"))
                else:
                    self.result.emit(f"‚ÑπÔ∏è  –°–ª—É–∂–±–∞ {service} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", QColor("#9e9e9e"))
            except Exception as e:
                self.result.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª—É–∂–±—ã {service}: {e}\n", QColor("#f44336"))


class DiagnosticsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    def __init__(self, main_window=None, parent=None):
        super().__init__(parent)
        self.main_window = main_window
        self.worker = None
        self.worker_thread = None
        self.is_operation_in_progress = False
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #1c1b1f;
                margin-bottom: 10px;
            }
        """)
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        splitter = QSplitter(Qt.Orientation.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_panel = self.create_top_panel()
        splitter.addWidget(top_panel)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–≤–æ–¥–æ–º
        bottom_panel = self.create_bottom_panel()
        splitter.addWidget(bottom_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        splitter.setSizes([150, 400])
        main_layout.addWidget(splitter)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.connect_signals()

    def create_top_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –º–µ–Ω—é."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ì—Ä—É–ø–ø–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        quick_group = QGroupBox("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        quick_group.setStyleSheet(StyleUtils.get_group_style())
        quick_layout = QHBoxLayout(quick_group)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.full_diagnostic_btn = QPushButton("üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        self.full_diagnostic_btn.setStyleSheet(StyleUtils.get_button_style("primary"))
        self.full_diagnostic_btn.setMinimumHeight(45)
        self.full_diagnostic_btn.setFont(QFont("Segoe UI", 11, QFont.Weight.Bold))
        
        quick_layout.addWidget(self.full_diagnostic_btn)
        quick_layout.addStretch()
        
        # –ì—Ä—É–ø–ø–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        specific_group = QGroupBox("üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        specific_group.setStyleSheet(StyleUtils.get_group_style())
        specific_layout = QHBoxLayout(specific_group)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.diagnostic_menu_btn = QToolButton()
        self.diagnostic_menu_btn.setText("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        self.diagnostic_menu_btn.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)
        self.diagnostic_menu_btn.setStyleSheet("""
            QToolButton {
                background-color: #1976d2;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px 20px;
                font-weight: bold;
                font-size: 11pt;
                min-height: 40px;
            }
            QToolButton:hover {
                background-color: #1565c0;
            }
            QToolButton:pressed {
                background-color: #0d47a1;
            }
        """)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.diagnostic_menu = QMenu()
        self.diagnostic_menu.setStyleSheet("""
            QMenu {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 6px;
                padding: 5px;
            }
            QMenu::item {
                padding: 10px 20px;
                border-radius: 4px;
                margin: 2px;
            }
            QMenu::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é
        actions = [
            ("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "conflicts"),
            ("üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å DNS", "dns"),
            ("üåç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å", "network"),
            ("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª—É–∂–±—ã", "services")
        ]
        
        for text, action in actions:
            menu_action = QAction(text, self)
            menu_action.triggered.connect(lambda checked, a=action: self.run_specific_diagnostic(a))
            self.diagnostic_menu.addAction(menu_action)
        
        self.diagnostic_menu_btn.setMenu(self.diagnostic_menu)
        specific_layout.addWidget(self.diagnostic_menu_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ Discord
        self.clean_discord_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Discord")
        self.clean_discord_btn.setStyleSheet(StyleUtils.get_button_style("warning"))
        self.clean_discord_btn.setMinimumHeight(40)
        self.clean_discord_btn.setFont(QFont("Segoe UI", 10, QFont.Weight.Medium))
        
        specific_layout.addWidget(self.clean_discord_btn)
        specific_layout.addStretch()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet(StyleUtils.get_progress_bar_style())
        self.progress_bar.setMinimumHeight(8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ layout
        layout.addWidget(quick_group)
        layout.addWidget(specific_group)
        layout.addWidget(self.progress_bar)
        
        return panel

    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
        output_header = QLabel("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        output_header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1c1b1f;
                padding: 5px 0;
            }
        """)
        layout.addWidget(output_header)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.output_text = QTextEdit()
        self.output_text.setReadOnly(True)
        self.output_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                color: #333333;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 12px;
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 11pt;
                line-height: 1.4;
            }
        """)
        layout.addWidget(self.output_text)
        
        return panel

    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫."""
        self.full_diagnostic_btn.clicked.connect(self.run_diagnostics)
        self.clean_discord_btn.clicked.connect(self.clear_discord_cache)

    def set_operation_mode(self, in_progress=True):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.is_operation_in_progress = in_progress
        self.full_diagnostic_btn.setEnabled(not in_progress)
        self.diagnostic_menu_btn.setEnabled(not in_progress)
        self.clean_discord_btn.setEnabled(not in_progress)
        
        if in_progress:
            self.progress_bar.setVisible(True)
            self.progress_bar.setRange(0, 100)
        else:
            self.progress_bar.setVisible(False)

    def run_diagnostics(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É."""
        self.output_text.clear()
        self.output_text.append("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n")
        self.run_specific_diagnostic("all")
        
    def run_specific_diagnostic(self, task):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.is_operation_in_progress:
            return
            
        if task == "all":
            self.output_text.clear()
            self.output_text.append("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n")

        self.set_operation_mode(True)

        self.worker_thread = QThread()
        self.worker = DiagnosticsWorker(task)
        self.worker.moveToThread(self.worker_thread)

        self.worker.result.connect(self.append_result)
        self.worker.error.connect(self.on_diagnostics_error)
        self.worker.finished.connect(self.on_diagnostics_finished)
        self.worker.progress.connect(self.progress_bar.setValue)
        self.worker_thread.started.connect(self.worker.run)

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        self.worker.finished.connect(self.worker_thread.quit)
        self.worker_thread.finished.connect(self.worker_thread.deleteLater)
        self.worker.finished.connect(self.worker.deleteLater)
        self.worker_thread.finished.connect(lambda: self.set_operation_mode(False))

        if self.main_window:
            self.main_window.register_thread(self.worker_thread)

        self.worker_thread.start()

    def append_result(self, text, color):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞."""
        self.output_text.setTextColor(color)
        self.output_text.insertPlainText(text)
        self.output_text.moveCursor(QTextCursor.MoveOperation.End)

    def on_diagnostics_error(self, error_message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ –≤–æ—Ä–∫–µ—Ä–µ."""
        self.append_result(f"\n‚ùå {error_message}\n", QColor("#f44336"))
        self.on_diagnostics_finished()

    def on_diagnostics_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        if self.worker is not None:
            self.output_text.setTextColor(QColor("#666666"))
            self.output_text.append("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")
            self.worker_thread = None
            self.worker = None
        
    def stop_threads(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        if hasattr(self, 'worker') and self.worker:
            self.worker.stop()
        if hasattr(self, 'worker_thread') and self.worker_thread and self.worker_thread.isRunning():
            self.worker_thread.quit()
            self.worker_thread.wait(2000)

    def clear_discord_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à Discord."""
        reply = QMessageBox.question(
            self, 
            'üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Discord', 
            "–≠—Ç–æ –∑–∞–∫—Ä–æ–µ—Ç Discord, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, 
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.output_text.clear()
            self.output_text.append("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Discord...\n")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.clean_discord_btn.setEnabled(False)
            self.clear_cache_thread = QThread()
            self.clear_cache_worker = ClearCacheWorker()
            self.clear_cache_worker.moveToThread(self.clear_cache_thread)

            self.clear_cache_worker.result.connect(lambda text: self.append_result(text, QColor("#333333")))
            self.clear_cache_worker.finished.connect(lambda: (
                self.append_result("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n", QColor("#4caf50")),
                self.clean_discord_btn.setEnabled(True),
                self.clear_cache_thread.quit()
            ))

            self.clear_cache_thread.started.connect(self.clear_cache_worker.run)
            self.clear_cache_thread.finished.connect(self.clear_cache_thread.deleteLater)
            self.clear_cache_worker.finished.connect(self.clear_cache_worker.deleteLater)

            if self.main_window:
                self.main_window.register_thread(self.clear_cache_thread)

            self.clear_cache_thread.start()


class ClearCacheWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
    result = Signal(str)
    finished = Signal()

    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É."""
        try:
            self.result.emit("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å Discord...\n")
            subprocess.run('taskkill /F /IM Discord.exe', capture_output=True, shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            self.result.emit("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å Discord –∑–∞–≤–µ—Ä—à–µ–Ω (–µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω).\n")

            appdata_path = os.getenv('APPDATA')
            if not appdata_path:
                self.result.emit("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É AppData.\n")
                self.finished.emit()
                return

            discord_cache_path = os.path.join(appdata_path, 'discord', 'Cache')
            if os.path.exists(discord_cache_path):
                try:
                    shutil.rmtree(discord_cache_path)
                    self.result.emit(f"‚úÖ –ü–∞–ø–∫–∞ –∫—ç—à–∞ Discord —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n")
                except Exception as e:
                    self.result.emit(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—ç—à Discord: {e}\n")
            else:
                self.result.emit(f"‚ÑπÔ∏è  –ü–∞–ø–∫–∞ –∫—ç—à–∞ Discord –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n")

        except Exception as e:
            self.result.emit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}\n")
        finally:
            self.finished.emit() 