from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, 
                              QPushButton, QLabel, QTextEdit, QProgressBar,
                              QComboBox, QSpinBox, QCheckBox, QTableWidget,
                              QTableWidgetItem, QHeaderView, QMessageBox,
                              QGroupBox, QFormLayout, QSplitter, QToolButton,
                              QMenu, QFrame, QGridLayout)
from PySide6.QtCore import Qt, Signal, QThread, QTimer, QObject
from PySide6.QtGui import QFont, QColor, QBrush, QAction
import requests
import socket
import threading
import time
from urllib.parse import urlparse
from typing import List, Dict, Tuple
import dns.resolver
from utils.file_manager import FileManager
from utils.style_utils import StyleUtils

class DomainCheckerThread(QThread):
    progress_updated = Signal(int, int)  # current, total
    result_ready = Signal(str, bool, str)  # domain, is_accessible, response_time
    status_updated = Signal(str)  # status message
    finished = Signal()
    
    def __init__(self, domains: List[str], check_type: str, timeout: int = 5):
        super().__init__()
        self.domains = domains
        self.check_type = check_type
        self.timeout = timeout
        self.is_running = True
        
    def run(self):
        total = len(self.domains)
        self.status_updated.emit(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {total} –¥–æ–º–µ–Ω–æ–≤...")
        
        for i, domain in enumerate(self.domains):
            if not self.is_running:
                break
                
            try:
                self.status_updated.emit(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {domain}")
                is_accessible, response_time = self.check_domain(domain)
                self.result_ready.emit(domain, is_accessible, response_time)
            except Exception as e:
                self.result_ready.emit(domain, False, f"–û—à–∏–±–∫–∞: {str(e)}")
                
            self.progress_updated.emit(i + 1, total)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        self.status_updated.emit("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.finished.emit()
        
    def check_domain(self, domain: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞"""
        start_time = time.time()
        
        if self.check_type == "HTTP":
            return self.check_http(domain)
        elif self.check_type == "HTTPS":
            return self.check_https(domain)
        elif self.check_type == "DNS":
            return self.check_dns(domain)
        elif self.check_type == "PING":
            return self.check_ping(domain)
        else:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏"
            
    def check_http(self, domain: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"""
        try:
            start_time = time.time()
            url = f"http://{domain}" if not domain.startswith(('http://', 'https://')) else domain
            response = requests.get(url, timeout=self.timeout, allow_redirects=True)
            response_time = f"{time.time() - start_time:.2f}s"
            return response.status_code < 400, response_time
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
            
    def check_https(self, domain: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTPS –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"""
        try:
            start_time = time.time()
            url = f"https://{domain}" if not domain.startswith(('http://', 'https://')) else domain
            response = requests.get(url, timeout=self.timeout, allow_redirects=True)
            response_time = f"{time.time() - start_time:.2f}s"
            return response.status_code < 400, response_time
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
            
    def check_dns(self, domain: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
        try:
            start_time = time.time()
            dns.resolver.resolve(domain, 'A')
            response_time = f"{time.time() - start_time:.2f}s"
            return True, response_time
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
            
    def check_ping(self, domain: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ping"""
        try:
            start_time = time.time()
            socket.gethostbyname(domain)
            response_time = f"{time.time() - start_time:.2f}s"
            return True, response_time
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.is_running = False

class DomainCheckerTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    
    def __init__(self, file_manager, main_window=None, parent=None):
        super().__init__(parent)
        self.file_manager = file_manager
        self.main_window = main_window
        self.results = []
        self.is_operation_in_progress = False
        
        self.worker_thread = None
        self.worker = None
        
        self.init_ui()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–æ–≤")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #1c1b1f;
                margin-bottom: 10px;
            }
        """)
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Orientation.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        top_panel = self.create_top_panel()
        splitter.addWidget(top_panel)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        bottom_panel = self.create_bottom_panel()
        splitter.addWidget(bottom_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        splitter.setSizes([200, 400])
        main_layout.addWidget(splitter)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.connect_signals()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.refresh_lists()

    def create_top_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        settings_group.setStyleSheet(StyleUtils.get_group_style())
        settings_layout = QGridLayout(settings_group)
        settings_layout.setVerticalSpacing(12)
        settings_layout.setHorizontalSpacing(15)
        
        # –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞
        list_label = QLabel("üìã –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤:")
        list_label.setStyleSheet("""
            QLabel {
                font-size: 11pt;
                font-weight: bold;
                color: #333333;
            }
        """)
        
        self.list_combo = QComboBox()
        self.list_combo.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11pt;
                min-height: 35px;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #666666;
                margin-right: 10px;
            }
        """)
        
        self.refresh_lists_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_lists_btn.setStyleSheet(StyleUtils.get_button_style("secondary"))
        self.refresh_lists_btn.setMinimumHeight(35)
        self.refresh_lists_btn.setFont(QFont("Segoe UI", 10, QFont.Weight.Medium))
        
        # –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
        type_label = QLabel("üîç –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        type_label.setStyleSheet("""
            QLabel {
                font-size: 11pt;
                font-weight: bold;
                color: #333333;
            }
        """)
        
        self.check_type_combo = QComboBox()
        self.check_type_combo.addItems(["HTTP", "HTTPS", "DNS", "PING"])
        self.check_type_combo.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11pt;
                min-height: 35px;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #666666;
                margin-right: 10px;
            }
        """)
        
        # –¢–∞–π–º–∞—É—Ç
        timeout_label = QLabel("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç:")
        timeout_label.setStyleSheet("""
            QLabel {
                font-size: 11pt;
                font-weight: bold;
                color: #333333;
            }
        """)
        
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(1, 30)
        self.timeout_spin.setValue(5)
        self.timeout_spin.setSuffix(" —Å–µ–∫")
        self.timeout_spin.setStyleSheet("""
            QSpinBox {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11pt;
                min-height: 35px;
            }
        """)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        settings_layout.addWidget(list_label, 0, 0)
        settings_layout.addWidget(self.list_combo, 0, 1)
        settings_layout.addWidget(self.refresh_lists_btn, 0, 2)
        settings_layout.addWidget(type_label, 1, 0)
        settings_layout.addWidget(self.check_type_combo, 1, 1, 1, 2)
        settings_layout.addWidget(timeout_label, 2, 0)
        settings_layout.addWidget(self.timeout_spin, 2, 1, 1, 2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_group = QGroupBox("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_group.setStyleSheet(StyleUtils.get_group_style())
        control_layout = QHBoxLayout(control_group)
        control_layout.setSpacing(10)
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        self.start_btn.setStyleSheet(StyleUtils.get_button_style("primary"))
        self.start_btn.setMinimumHeight(45)
        self.start_btn.setFont(QFont("Segoe UI", 11, QFont.Weight.Bold))
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setStyleSheet(StyleUtils.get_button_style("danger"))
        self.stop_btn.setMinimumHeight(45)
        self.stop_btn.setFont(QFont("Segoe UI", 11, QFont.Weight.Bold))
        self.stop_btn.setEnabled(False)
        
        control_layout.addWidget(self.start_btn)
        control_layout.addWidget(self.stop_btn)
        control_layout.addStretch()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_group.setStyleSheet(StyleUtils.get_group_style())
        progress_layout = QVBoxLayout(progress_group)
        progress_layout.setSpacing(10)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet(StyleUtils.get_progress_bar_style())
        self.progress_bar.setMinimumHeight(10)
        
        self.progress_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        self.progress_label.setStyleSheet("""
            QLabel {
                font-size: 11pt;
                color: #666666;
                padding: 5px;
            }
        """)
        
        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.progress_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        layout.addWidget(settings_group)
        layout.addWidget(control_group)
        layout.addWidget(progress_group)
        
        return panel

    def create_bottom_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        panel = QFrame()
        panel.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 8px;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_header = QLabel("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
        results_header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1c1b1f;
                padding: 5px 0;
            }
        """)
        layout.addWidget(results_header)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(4)
        self.results_table.setHorizontalHeaderLabels(["üåê –î–æ–º–µ–Ω", "üìä –°—Ç–∞—Ç—É—Å", "‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏"])
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.results_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                gridline-color: #f0f0f0;
                font-size: 10pt;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 10px;
                border: none;
                border-bottom: 2px solid #dee2e6;
                font-weight: bold;
                font-size: 11pt;
                color: #333333;
            }
        """)
        layout.addWidget(self.results_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_btn_layout = QHBoxLayout()
        results_btn_layout.setSpacing(10)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_menu_btn = QToolButton()
        self.actions_menu_btn.setText("üìã –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        self.actions_menu_btn.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)
        self.actions_menu_btn.setStyleSheet("""
            QToolButton {
                background-color: #1976d2;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 16px;
                font-weight: bold;
                font-size: 10pt;
                min-height: 40px;
            }
            QToolButton:hover {
                background-color: #1565c0;
            }
            QToolButton:pressed {
                background-color: #0d47a1;
            }
        """)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_menu = QMenu()
        self.actions_menu.setStyleSheet("""
            QMenu {
                background-color: white;
                border: 1px solid #e1e1e1;
                border-radius: 6px;
                padding: 5px;
            }
            QMenu::item {
                padding: 10px 20px;
                border-radius: 4px;
                margin: 2px;
            }
            QMenu::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é
        actions = [
            ("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.export_results),
            ("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", self.clear_results),
            ("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", self.show_statistics)
        ]
        
        for text, action in actions:
            menu_action = QAction(text, self)
            menu_action.triggered.connect(action)
            self.actions_menu.addAction(menu_action)
        
        self.actions_menu_btn.setMenu(self.actions_menu)
        results_btn_layout.addWidget(self.actions_menu_btn)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_label = QLabel("üîç –§–∏–ª—å—Ç—Ä—ã:")
        filter_label.setStyleSheet("""
            QLabel {
                font-size: 11pt;
                font-weight: bold;
                color: #333333;
            }
        """)
        
        self.filter_accessible_cb = QCheckBox("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ")
        self.filter_inaccessible_cb = QCheckBox("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ")
        
        for cb in [self.filter_accessible_cb, self.filter_inaccessible_cb]:
            cb.setStyleSheet("""
                QCheckBox {
                    font-size: 10pt;
                    color: #333333;
                    spacing: 8px;
                }
                QCheckBox::indicator {
                    width: 18px;
                    height: 18px;
                    border: 2px solid #dee2e6;
                    border-radius: 4px;
                    background-color: white;
                }
                QCheckBox::indicator:checked {
                    background-color: #1976d2;
                    border-color: #1976d2;
                }
            """)
        
        results_btn_layout.addWidget(filter_label)
        results_btn_layout.addWidget(self.filter_accessible_cb)
        results_btn_layout.addWidget(self.filter_inaccessible_cb)
        results_btn_layout.addStretch()
        
        layout.addLayout(results_btn_layout)
        
        return panel

    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫ —Å–ª–æ—Ç–∞–º."""
        self.refresh_lists_btn.clicked.connect(self.refresh_lists)
        self.start_btn.clicked.connect(self.start_checking)
        self.stop_btn.clicked.connect(self.stop_checking)
        self.filter_accessible_cb.stateChanged.connect(self.filter_results)
        self.filter_inaccessible_cb.stateChanged.connect(self.filter_results)
        
    def set_operation_mode(self, in_progress=True):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.is_operation_in_progress = in_progress
        self.start_btn.setEnabled(not in_progress)
        self.stop_btn.setEnabled(in_progress)
        self.actions_menu_btn.setEnabled(not in_progress)
        self.list_combo.setEnabled(not in_progress)
        self.check_type_combo.setEnabled(not in_progress)
        self.timeout_spin.setEnabled(not in_progress)
        
    def refresh_lists(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.list_combo.clear()
        
        try:
            lists_dir = self.file_manager.lists_dir
            if lists_dir.exists():
                for file_path in lists_dir.glob("*.txt"):
                    self.list_combo.addItem(file_path.name, str(file_path))
                    
        except Exception as e:
            QMessageBox.warning(self, "‚ö†Ô∏è –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏: {str(e)}")
            
    def start_checking(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–µ–Ω–æ–≤"""
        if self.list_combo.count() == 0:
            QMessageBox.warning(self, "‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–æ–º–µ–Ω–æ–≤")
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_path = self.list_combo.currentData()
            domains = self.load_domains_from_file(file_path)
            
            if not domains:
                QMessageBox.warning(self, "‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                return
                
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.clear_results()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.worker_thread = DomainCheckerThread(
                domains,
                self.check_type_combo.currentText(),
                self.timeout_spin.value()
            )
            
            self.worker_thread.progress_updated.connect(self.update_progress)
            self.worker_thread.result_ready.connect(self.add_result)
            self.worker_thread.status_updated.connect(self.progress_label.setText)
            self.worker_thread.finished.connect(self.checking_finished)
            
            self.worker_thread.start()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.set_operation_mode(True)
            self.progress_bar.setMaximum(len(domains))
            self.progress_bar.setValue(0)
            self.progress_label.setText("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞...")
            
            if self.main_window:
                self.main_window.register_thread(self.worker_thread)
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: {str(e)}")
            
    def stop_checking(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–µ–Ω–æ–≤"""
        if self.worker_thread and self.worker_thread.isRunning():
            self.worker_thread.stop()
            self.worker_thread.wait(5000)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
            if self.worker_thread.isRunning():
                self.worker_thread.terminate()
                self.worker_thread.wait()
            
        self.checking_finished()
        
    def checking_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.set_operation_mode(False)
        self.progress_label.setText("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def update_progress(self, current: int, total: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä"""
        self.progress_bar.setValue(current)
        self.progress_label.setText(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {current}/{total}")
        
    def add_result(self, domain: str, is_accessible: bool, response_time: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.results_table.rowCount()
        self.results_table.insertRow(row)
        
        # –î–æ–º–µ–Ω
        domain_item = QTableWidgetItem(domain)
        domain_item.setFlags(domain_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        
        # –°—Ç–∞—Ç—É—Å
        status_text = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if is_accessible else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        status_item = QTableWidgetItem(status_text)
        status_item.setFlags(status_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        
        if is_accessible:
            status_item.setBackground(QColor("#e8f5e8"))
            status_item.setForeground(QColor("#2e7d32"))
        else:
            status_item.setBackground(QColor("#ffebee"))
            status_item.setForeground(QColor("#c62828"))
            
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        time_item = QTableWidgetItem(response_time)
        time_item.setFlags(time_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        
        # –î–µ—Ç–∞–ª–∏
        details_item = QTableWidgetItem("")
        details_item.setFlags(details_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        
        self.results_table.setItem(row, 0, domain_item)
        self.results_table.setItem(row, 1, status_item)
        self.results_table.setItem(row, 2, time_item)
        self.results_table.setItem(row, 3, details_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.results.append({
            'domain': domain,
            'accessible': is_accessible,
            'response_time': response_time
        })
        
    def load_domains_from_file(self, file_path: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        domains = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        domain = self.extract_domain(line)
                        if domain:
                            domains.append(domain)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
        return domains
        
    def extract_domain(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if '#' in line:
            line = line.split('#')[0].strip()
            
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        line = line.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
        if line.startswith(('http://', 'https://')):
            try:
                parsed = urlparse(line)
                return parsed.netloc
            except:
                return line
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–º–µ–Ω
            return line
            
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        if not self.results:
            QMessageBox.information(self, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        try:
            from PySide6.QtWidgets import QFileDialog
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                f"domain_check_results_{int(time.time())}.csv",
                "CSV —Ñ–∞–π–ª—ã (*.csv);;–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)"
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    if file_path.endswith('.csv'):
                        f.write("–î–æ–º–µ–Ω,–°—Ç–∞—Ç—É—Å,–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞\n")
                        for result in self.results:
                            status = "–î–æ—Å—Ç—É–ø–µ–Ω" if result['accessible'] else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                            f.write(f"{result['domain']},{status},{result['response_time']}\n")
                    else:
                        for result in self.results:
                            status = "–î–æ—Å—Ç—É–ø–µ–Ω" if result['accessible'] else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                            f.write(f"{result['domain']} - {status} ({result['response_time']})\n")
                            
                QMessageBox.information(self, "‚úÖ –£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(e)}")
            
    def clear_results(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self.results_table.setRowCount(0)
        self.results.clear()
        
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            QMessageBox.information(self, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        total = len(self.results)
        accessible = sum(1 for r in self.results if r['accessible'])
        inaccessible = total - accessible
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:

üåê –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {total}
‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {accessible} ({accessible/total*100:.1f}%)
‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {inaccessible} ({inaccessible/total*100:.1f}%)

‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {self.calculate_average_time():.2f}s
        """
        
        QMessageBox.information(self, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)
        
    def calculate_average_time(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        if not self.results:
            return 0.0
            
        total_time = 0
        count = 0
        
        for result in self.results:
            if result['accessible']:
                try:
                    time_str = result['response_time']
                    if 's' in time_str:
                        time_val = float(time_str.replace('s', ''))
                        total_time += time_val
                        count += 1
                except:
                    continue
                    
        return total_time / count if count > 0 else 0.0
        
    def filter_results(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        show_accessible = self.filter_accessible_cb.isChecked()
        show_inaccessible = self.filter_inaccessible_cb.isChecked()
        
        for row in range(self.results_table.rowCount()):
            status_item = self.results_table.item(row, 1)
            if status_item:
                is_accessible = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" in status_item.text()
                
                if show_accessible and show_inaccessible:
                    self.results_table.setRowHidden(row, False)
                elif show_accessible and is_accessible:
                    self.results_table.setRowHidden(row, False)
                elif show_inaccessible and not is_accessible:
                    self.results_table.setRowHidden(row, False)
                else:
                    self.results_table.setRowHidden(row, True)

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        self.stop_checking()
        super().closeEvent(event) 